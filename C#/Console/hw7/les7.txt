using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace les7
{
 class Program
 {
  static void Main(string[] args)
  {
   //MyArray a1 = new MyArray();
   //for (int i = 0; i < 10; i++)
   //{
   // a1[i] = (i + 1) * 10;
   // Console.WriteLine("A[{0}] = {1}", i, a1[i]);
   //}

   //a1["Five"] = 99;
   //a1["Seven"] = 55;
   //a1.showArray();
   //Console.WriteLine("A['Three'] = {0}", a1["Three"]);
   //MyArray2D B = new MyArray2D();
   //B[2, 2] = 9;
   //B[3, 4] = 7;
   //B[0, 0] = 1;
   //for (int i = 0; i < 5; i++)
   //{
   // for (int j = 0; j < 5; j++)
   // {
   //  Console.Write("{0} ", B[i, j]);
   // }
   // Console.WriteLine();
   //}
   //Money M1 = (Money)345;
   //Money M2 = 7.34;
   //M1.showMoney();
   //M2.showMoney();
   Money M = new Money(12, 35);
   Console.WriteLine(M.ToString());
   Console.WriteLine(M);
  }
  }
 class MyArray
 {
  private int[] arr = new int[10];
  
  public int this[int index]
  {
   get
   {
    return this.arr[index];
   }
   set
   {
    this.arr[index] = value;
   }
  }
  public void showArray()
  {
   for (int i = 0; i < arr.Length; i++)
    Console.WriteLine("[{0}] = {1}", i, this.arr[i]);
  }
  private static String[] strIndex = { "Zero", "One", "Two", "Three", "Four",
           "Five", "Six", "Seven", "Eight", "Nine", "Ten"};
  private static int indexFromName(String name)
  {
   for (int i = 0; i < MyArray.strIndex.Length; i++)
    if (name == MyArray.strIndex[i])
     return i;
   return 0;
  }
  public int this[String index]
  {
   get
   {
    return this.arr[MyArray.indexFromName(index)];
   }
   set
   {
    this.arr[MyArray.indexFromName(index)] = value;
   }
  }
 }
 class MyArray2D
 {
  private int[,] arr = new int[5, 5];
  public int this[int row, int column]
  {
   get
   {
    return this.arr[row, column];
   }
   set
   {
    this.arr[row, column] = value;
   }
  }
 }
 class Money
 {
  private int uah;
  public int Uah
  {
   get
   {
    return this.uah;
   }
   set
   {
    this.uah = value;
   }
  }
  private int kop;
  public int Kop
  {
   get
   {
    return this.kop;
   }
   set
   {
    this.kop = value % 100;
    this.uah += value / 100;
   }
  }
  public Money(int uah, int kop)
  {
   this.Uah = uah;
   this.Kop = kop;
  }
  public void showMoney()
  {
   Console.WriteLine("{0}.{1}грн.", this.uah, this.kop);
  }
  public static Money operator +(Money a, Money b)
  {
   return new Money(a.uah + b.uah, a.kop + b.kop);
  }
  public static Money operator +(Money a, int b)
  {
   return new Money(a.uah, a.kop + b);
  }
  //public static bool operator ==(Money a, Money b)
  //{
  // return a.uah * 100 + a.kop == b.uah * 100 + b.kop;
  //}
  //public static bool operator !=(Money a, Money b)
  //{
  // return a.uah * 100 + a.kop != b.uah * 100 + b.kop;
  //}
  public static explicit operator Money(int k)
  {
   return new Money(0, k);
  }
  public static implicit operator Money(double s)
  {
   int g = (int)s;
   return new Money(g, (int)((s - g) * 100));
  }
  public override bool Equals(object obj)
  {
   if (obj is Money)
   {
    Money m = (Money)obj;
    return this.uah * 100 + this.kop == m.uah * 100 + m.kop;
   }
   return false;
  }
  public override int GetHashCode()
  {
   return base.GetHashCode();
  }
  public Money copy()
  {
   return (Money)this.MemberwiseClone();
  }
  public override string ToString()
  {
   return String.Format("{0}.{1}", this.uah, this.kop);
  }
 }
}